// Fixed and optimized version
async function loadImage(file) {
  return new Promise((resolve, reject) => {
    const img = new Image();
    img.onload = () => resolve(img);
    img.onerror = reject;
    img.src = URL.createObjectURL(file);
  });
}

function getImageData(img) {
  const canvas = document.createElement('canvas');
  const ctx = canvas.getContext('2d');
  canvas.width = Math.min(200, img.width);
  canvas.height = Math.min(200, img.height);
  ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
  
  const pixels = ctx.getImageData(0, 0, canvas.width, canvas.height).data;
  const formatted = [];
  
  // Convert RGBA to RGB, skipping transparent pixels
  for (let i = 0; i < pixels.length; i += 4) {
    if (pixels[i+3] > 0) { // Only include non-transparent pixels
      formatted.push([pixels[i], pixels[i+1], pixels[i+2]]);
    }
  }
  
  return formatted.length > 0 ? formatted : [[0,0,0]]; // Fallback
}

async function extractPalette(file) {
  try {
    const img = await loadImage(file);
    const data = getImageData(img);
    return quantize(data, 5).palette();
  } catch (e) {
    console.error("Extraction failed:", e);
    return [[255,255,255], [0,0,0]]; // Default palette
  }
}

async function generatePDF(palette) {
  const { PDFDocument, rgb } = PDFLib;
  const pdfDoc = await PDFDocument.create();
  const page = pdfDoc.addPage([400, 600]);

  palette.slice(0, 5).forEach((color, i) => {
    const [r, g, b] = color;
    page.drawRectangle({
      color: rgb(r/255, g/255, b/255),
      x: 50, y: 500 - i*60,
      width: 50, height: 50,
    });
    page.drawText(
      `#${r.toString(16).padStart(2,'0')}${g.toString(16).padStart(2,'0')}${b.toString(16).padStart(2,'0')}`.toUpperCase(),
      { x: 110, y: 530 - i*60, size: 12 }
    );
  });

  page.drawText("Generated by Shade", { x: 50, y: 30, size: 10 });
  return await pdfDoc.save();
}

document.getElementById("generate-pdf").addEventListener("click", async () => {
  try {
    const file = document.getElementById("image-upload").files[0];
    if (!file) return alert("Please upload an image first!");
    
    const palette = await extractPalette(file);
    const pdfBytes = await generatePDF(palette);
    
    download(new Blob([pdfBytes]), "shade-palette.pdf");
  } catch (e) {
    console.error("Full generation error:", e);
    alert("Generation failed. Please try a different image format (JPG/PNG).");
  }
});
